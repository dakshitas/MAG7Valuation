{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "6337869f-5e58-46a5-8246-ed2866e0cd21",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from datetime import datetime\n",
    "import warnings\n",
    "import os\n",
    "import yfinance as yf\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bee6d76b-428f-4a79-af91-511f105e6cc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MAG7ValuationModel:\n",
    "    \"\"\"\n",
    "    Comprehensive valuation model for Magnificent 7 companies using 5 key methods:\n",
    "    1. Price-to-Earnings (P/E) Ratio\n",
    "    2. Discounted Cash Flow (DCF)\n",
    "    3. Price-to-Sales (P/S) Ratio\n",
    "    4. Enterprise Value/EBITDA (EV/EBITDA)\n",
    "    5. Price-to-Book (P/B) Ratio\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.companies = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'NVDA', 'TSLA', 'META']\n",
    "        self.company_names = {\n",
    "            'AAPL': 'Apple Inc.',\n",
    "            'MSFT': 'Microsoft Corp.',\n",
    "            'GOOGL': 'Alphabet Inc.',\n",
    "            'AMZN': 'Amazon.com Inc.',\n",
    "            'NVDA': 'NVIDIA Corp.',\n",
    "            'TSLA': 'Tesla Inc.',\n",
    "            'META': 'Meta Platforms Inc.'\n",
    "        }\n",
    "        \n",
    "        # Fetch real-time financial data from yfinance\n",
    "        print(\"Fetching real-time financial data from Yahoo Finance...\")\n",
    "        self.financial_data = self.fetch_financial_data()\n",
    "    \n",
    "    def fetch_financial_data(self):\n",
    "        \"\"\"Fetch real-time financial data from yfinance for all MAG7 companies\"\"\"\n",
    "        financial_data = {}\n",
    "        \n",
    "        for ticker in self.companies:\n",
    "            try:\n",
    "                print(f\"Fetching data for {ticker}...\")\n",
    "                stock = yf.Ticker(ticker)\n",
    "                \n",
    "                # Get basic info\n",
    "                info = stock.info\n",
    "                \n",
    "                # Get financial statements\n",
    "                financials = stock.financials\n",
    "                balance_sheet = stock.balance_sheet\n",
    "                cashflow = stock.cashflow\n",
    "                \n",
    "                # Current stock price\n",
    "                current_price = info.get('currentPrice', info.get('regularMarketPrice', 0))\n",
    "                \n",
    "                # Market cap (in billions)\n",
    "                market_cap = info.get('marketCap', 0) / 1e9 if info.get('marketCap') else 0\n",
    "                \n",
    "                # Shares outstanding (in billions)\n",
    "                shares_outstanding = info.get('sharesOutstanding', 0) / 1e9 if info.get('sharesOutstanding') else 0\n",
    "                \n",
    "                # Revenue (TTM in billions) - Total Revenue from income statement\n",
    "                revenue = 0\n",
    "                if not financials.empty and 'Total Revenue' in financials.index:\n",
    "                    revenue = financials.loc['Total Revenue'].iloc[0] / 1e9 if not pd.isna(financials.loc['Total Revenue'].iloc[0]) else 0\n",
    "                \n",
    "                # Net Income (TTM in billions)\n",
    "                net_income = 0\n",
    "                if not financials.empty and 'Net Income' in financials.index:\n",
    "                    net_income = financials.loc['Net Income'].iloc[0] / 1e9 if not pd.isna(financials.loc['Net Income'].iloc[0]) else 0\n",
    "                \n",
    "                # EBITDA (TTM in billions)\n",
    "                ebitda = info.get('ebitda', 0) / 1e9 if info.get('ebitda') else 0\n",
    "                \n",
    "                # Total debt (in billions)\n",
    "                total_debt = 0\n",
    "                if not balance_sheet.empty and 'Total Debt' in balance_sheet.index:\n",
    "                    total_debt = balance_sheet.loc['Total Debt'].iloc[0] / 1e9 if not pd.isna(balance_sheet.loc['Total Debt'].iloc[0]) else 0\n",
    "                elif not balance_sheet.empty and 'Long Term Debt' in balance_sheet.index:\n",
    "                    # Fallback to long-term debt if total debt not available\n",
    "                    long_term_debt = balance_sheet.loc['Long Term Debt'].iloc[0] / 1e9 if not pd.isna(balance_sheet.loc['Long Term Debt'].iloc[0]) else 0\n",
    "                    current_debt = 0\n",
    "                    if 'Current Debt' in balance_sheet.index:\n",
    "                        current_debt = balance_sheet.loc['Current Debt'].iloc[0] / 1e9 if not pd.isna(balance_sheet.loc['Current Debt'].iloc[0]) else 0\n",
    "                    total_debt = long_term_debt + current_debt\n",
    "                \n",
    "                # Cash and cash equivalents (in billions)\n",
    "                cash = 0\n",
    "                if not balance_sheet.empty and 'Cash And Cash Equivalents' in balance_sheet.index:\n",
    "                    cash = balance_sheet.loc['Cash And Cash Equivalents'].iloc[0] / 1e9 if not pd.isna(balance_sheet.loc['Cash And Cash Equivalents'].iloc[0]) else 0\n",
    "                elif not balance_sheet.empty and 'Cash' in balance_sheet.index:\n",
    "                    cash = balance_sheet.loc['Cash'].iloc[0] / 1e9 if not pd.isna(balance_sheet.loc['Cash'].iloc[0]) else 0\n",
    "                \n",
    "                # Book value (Total Stockholder Equity in billions)\n",
    "                book_value = 0\n",
    "                if not balance_sheet.empty and 'Total Stockholder Equity' in balance_sheet.index:\n",
    "                    book_value = balance_sheet.loc['Total Stockholder Equity'].iloc[0] / 1e9 if not pd.isna(balance_sheet.loc['Total Stockholder Equity'].iloc[0]) else 0\n",
    "                elif not balance_sheet.empty and 'Stockholders Equity' in balance_sheet.index:\n",
    "                    book_value = balance_sheet.loc['Stockholders Equity'].iloc[0] / 1e9 if not pd.isna(balance_sheet.loc['Stockholders Equity'].iloc[0]) else 0\n",
    "                \n",
    "                # Free Cash Flow (TTM in billions)\n",
    "                free_cash_flow = 0\n",
    "                if not cashflow.empty and 'Free Cash Flow' in cashflow.index:\n",
    "                    free_cash_flow = cashflow.loc['Free Cash Flow'].iloc[0] / 1e9 if not pd.isna(cashflow.loc['Free Cash Flow'].iloc[0]) else 0\n",
    "                elif not cashflow.empty and 'Operating Cash Flow' in cashflow.index and 'Capital Expenditures' in cashflow.index:\n",
    "                    # Calculate FCF as Operating Cash Flow - Capital Expenditures\n",
    "                    ocf = cashflow.loc['Operating Cash Flow'].iloc[0] / 1e9 if not pd.isna(cashflow.loc['Operating Cash Flow'].iloc[0]) else 0\n",
    "                    capex = cashflow.loc['Capital Expenditures'].iloc[0] / 1e9 if not pd.isna(cashflow.loc['Capital Expenditures'].iloc[0]) else 0\n",
    "                    free_cash_flow = ocf - abs(capex)  # capex is usually negative, so we take absolute value\n",
    "                \n",
    "                financial_data[ticker] = {\n",
    "                    'market_cap': market_cap,\n",
    "                    'revenue': revenue,\n",
    "                    'net_income': net_income,\n",
    "                    'ebitda': ebitda,\n",
    "                    'total_debt': total_debt,\n",
    "                    'cash': cash,\n",
    "                    'book_value': book_value,\n",
    "                    'shares_outstanding': shares_outstanding,\n",
    "                    'free_cash_flow': free_cash_flow,\n",
    "                    'current_price': current_price\n",
    "                }\n",
    "                \n",
    "                print(f\"✓ {ticker} data fetched successfully\")\n",
    "                \n",
    "            except Exception as e:\n",
    "                print(f\"✗ Error fetching data for {ticker}: {str(e)}\")\n",
    "                # Provide fallback values to prevent crashes\n",
    "                financial_data[ticker] = {\n",
    "                    'market_cap': 0,\n",
    "                    'revenue': 0,\n",
    "                    'net_income': 0,\n",
    "                    'ebitda': 0,\n",
    "                    'total_debt': 0,\n",
    "                    'cash': 0,\n",
    "                    'book_value': 0,\n",
    "                    'shares_outstanding': 1,  # Avoid division by zero\n",
    "                    'free_cash_flow': 0,\n",
    "                    'current_price': 0\n",
    "                }\n",
    "        \n",
    "        print(\"Data fetching completed!\\n\")\n",
    "        return financial_data\n",
    "    \n",
    "    def calculate_pe_valuation(self):\n",
    "        \"\"\"Calculate P/E ratio and implied valuations\"\"\"\n",
    "        pe_data = {}\n",
    "        \n",
    "        for ticker in self.companies:\n",
    "            data = self.financial_data[ticker]\n",
    "            eps = data['net_income'] / data['shares_outstanding']\n",
    "            pe_ratio = data['current_price'] / eps if eps > 0 else np.nan\n",
    "            \n",
    "            pe_data[ticker] = {\n",
    "                'eps': eps,\n",
    "                'pe_ratio': pe_ratio,\n",
    "                'current_price': data['current_price']\n",
    "            }\n",
    "        \n",
    "        return pe_data\n",
    "    \n",
    "    def calculate_dcf_valuation(self, growth_rate=0.08, terminal_growth=0.03, discount_rate=0.10, years=5):\n",
    "        \"\"\"Calculate DCF valuation using free cash flow projections\"\"\"\n",
    "        dcf_data = {}\n",
    "        \n",
    "        for ticker in self.companies:\n",
    "            data = self.financial_data[ticker]\n",
    "            fcf = data['free_cash_flow']\n",
    "            shares = data['shares_outstanding']\n",
    "            \n",
    "            # Project future cash flows\n",
    "            future_fcf = []\n",
    "            for year in range(1, years + 1):\n",
    "                projected_fcf = fcf * (1 + growth_rate) ** year\n",
    "                future_fcf.append(projected_fcf)\n",
    "            \n",
    "            # Terminal value\n",
    "            terminal_fcf = future_fcf[-1] * (1 + terminal_growth)\n",
    "            terminal_value = terminal_fcf / (discount_rate - terminal_growth)\n",
    "            \n",
    "            # Discount to present value\n",
    "            pv_fcf = sum([cf / (1 + discount_rate) ** (i + 1) for i, cf in enumerate(future_fcf)])\n",
    "            pv_terminal = terminal_value / (1 + discount_rate) ** years\n",
    "            \n",
    "            enterprise_value = pv_fcf + pv_terminal\n",
    "            equity_value = enterprise_value + data['cash'] - data['total_debt']\n",
    "            dcf_price = equity_value / shares\n",
    "            \n",
    "            dcf_data[ticker] = {\n",
    "                'dcf_price': dcf_price,\n",
    "                'enterprise_value': enterprise_value,\n",
    "                'equity_value': equity_value,\n",
    "                'current_price': data['current_price']\n",
    "            }\n",
    "        \n",
    "        return dcf_data\n",
    "    \n",
    "    def calculate_ps_valuation(self):\n",
    "        \"\"\"Calculate Price-to-Sales ratio and sector comparison\"\"\"\n",
    "        ps_data = {}\n",
    "        \n",
    "        for ticker in self.companies:\n",
    "            data = self.financial_data[ticker]\n",
    "            revenue_per_share = data['revenue'] / data['shares_outstanding']\n",
    "            ps_ratio = data['current_price'] / revenue_per_share\n",
    "            \n",
    "            ps_data[ticker] = {\n",
    "                'revenue_per_share': revenue_per_share,\n",
    "                'ps_ratio': ps_ratio,\n",
    "                'current_price': data['current_price']\n",
    "            }\n",
    "        \n",
    "        return ps_data\n",
    "    \n",
    "    def calculate_ev_ebitda_valuation(self):\n",
    "        \"\"\"Calculate EV/EBITDA ratio\"\"\"\n",
    "        ev_ebitda_data = {}\n",
    "        \n",
    "        for ticker in self.companies:\n",
    "            data = self.financial_data[ticker]\n",
    "            enterprise_value = data['market_cap'] + data['total_debt'] - data['cash']\n",
    "            ev_ebitda_ratio = enterprise_value / data['ebitda'] if data['ebitda'] > 0 else np.nan\n",
    "            \n",
    "            ev_ebitda_data[ticker] = {\n",
    "                'enterprise_value': enterprise_value,\n",
    "                'ebitda': data['ebitda'],\n",
    "                'ev_ebitda_ratio': ev_ebitda_ratio,\n",
    "                'market_cap': data['market_cap']\n",
    "            }\n",
    "        \n",
    "        return ev_ebitda_data\n",
    "    \n",
    "    def calculate_pb_valuation(self):\n",
    "        \"\"\"Calculate Price-to-Book ratio\"\"\"\n",
    "        pb_data = {}\n",
    "        \n",
    "        for ticker in self.companies:\n",
    "            data = self.financial_data[ticker]\n",
    "            book_value_per_share = data['book_value'] / data['shares_outstanding']\n",
    "            pb_ratio = data['current_price'] / book_value_per_share\n",
    "            \n",
    "            pb_data[ticker] = {\n",
    "                'book_value_per_share': book_value_per_share,\n",
    "                'pb_ratio': pb_ratio,\n",
    "                'current_price': data['current_price']\n",
    "            }\n",
    "        \n",
    "        return pb_data\n",
    "    \n",
    "    def comprehensive_analysis(self):\n",
    "        \"\"\"Perform comprehensive valuation analysis\"\"\"\n",
    "        pe_data = self.calculate_pe_valuation()\n",
    "        dcf_data = self.calculate_dcf_valuation()\n",
    "        ps_data = self.calculate_ps_valuation()\n",
    "        ev_ebitda_data = self.calculate_ev_ebitda_valuation()\n",
    "        pb_data = self.calculate_pb_valuation()\n",
    "        \n",
    "        # Create summary DataFrame\n",
    "        summary_data = []\n",
    "        \n",
    "        for ticker in self.companies:\n",
    "            row = {\n",
    "                'Company': self.company_names[ticker],\n",
    "                'Ticker': ticker,\n",
    "                'Current Price': self.financial_data[ticker]['current_price'],\n",
    "                'Market Cap (B)': self.financial_data[ticker]['market_cap'],\n",
    "                'P/E Ratio': pe_data[ticker]['pe_ratio'],\n",
    "                'DCF Price': dcf_data[ticker]['dcf_price'],\n",
    "                'P/S Ratio': ps_data[ticker]['ps_ratio'],\n",
    "                'EV/EBITDA': ev_ebitda_data[ticker]['ev_ebitda_ratio'],\n",
    "                'P/B Ratio': pb_data[ticker]['pb_ratio']\n",
    "            }\n",
    "            summary_data.append(row)\n",
    "        \n",
    "        summary_df = pd.DataFrame(summary_data)\n",
    "        \n",
    "        return summary_df, pe_data, dcf_data, ps_data, ev_ebitda_data, pb_data\n",
    "    \n",
    "    def calculate_relative_valuations(self, summary_df):\n",
    "        \"\"\"Calculate relative valuations based on sector averages\"\"\"\n",
    "        # Calculate sector averages (excluding outliers)\n",
    "        metrics = ['P/E Ratio', 'P/S Ratio', 'EV/EBITDA', 'P/B Ratio']\n",
    "        sector_averages = {}\n",
    "        \n",
    "        for metric in metrics:\n",
    "            values = summary_df[metric].dropna()\n",
    "            # Remove extreme outliers (beyond 2 standard deviations)\n",
    "            mean_val = values.mean()\n",
    "            std_val = values.std()\n",
    "            filtered_values = values[(values >= mean_val - 2*std_val) & (values <= mean_val + 2*std_val)]\n",
    "            sector_averages[metric] = filtered_values.mean()\n",
    "        \n",
    "        # Calculate implied prices based on sector averages\n",
    "        relative_valuations = []\n",
    "        \n",
    "        for _, row in summary_df.iterrows():\n",
    "            ticker = row['Ticker']\n",
    "            data = self.financial_data[ticker]\n",
    "            \n",
    "            # P/E based valuation\n",
    "            eps = data['net_income'] / data['shares_outstanding']\n",
    "            pe_implied_price = eps * sector_averages['P/E Ratio'] if not np.isnan(sector_averages['P/E Ratio']) else np.nan\n",
    "            \n",
    "            # P/S based valuation\n",
    "            revenue_per_share = data['revenue'] / data['shares_outstanding']\n",
    "            ps_implied_price = revenue_per_share * sector_averages['P/S Ratio']\n",
    "            \n",
    "            # P/B based valuation\n",
    "            book_value_per_share = data['book_value'] / data['shares_outstanding']\n",
    "            pb_implied_price = book_value_per_share * sector_averages['P/B Ratio']\n",
    "            \n",
    "            relative_valuations.append({\n",
    "                'Ticker': ticker,\n",
    "                'Company': row['Company'],\n",
    "                'Current Price': row['Current Price'],\n",
    "                'PE Implied Price': pe_implied_price,\n",
    "                'PS Implied Price': ps_implied_price,\n",
    "                'PB Implied Price': pb_implied_price,\n",
    "                'DCF Price': row['DCF Price']\n",
    "            })\n",
    "        \n",
    "        return pd.DataFrame(relative_valuations), sector_averages\n",
    "    \n",
    "    def visualize_analysis(self, summary_df, relative_valuations_df, save_figures=True, output_dir=\"mag7_analysis_charts\"):\n",
    "        \"\"\"Create comprehensive visualization of the analysis\"\"\"\n",
    "        import os\n",
    "        \n",
    "        # Create output directory if saving figures\n",
    "        if save_figures:\n",
    "            if not os.path.exists(output_dir):\n",
    "                os.makedirs(output_dir)\n",
    "            print(f\"Saving charts to directory: {output_dir}/\")\n",
    "        \n",
    "        fig, axes = plt.subplots(2, 3, figsize=(20, 12))\n",
    "        fig.suptitle('MAG7 Comprehensive Valuation Analysis', fontsize=16, fontweight='bold')\n",
    "        \n",
    "        # 1. Market Cap comparison\n",
    "        axes[0, 0].bar(summary_df['Ticker'], summary_df['Market Cap (B)'])\n",
    "        axes[0, 0].set_title('Market Capitalization (Billions)')\n",
    "        axes[0, 0].set_ylabel('Market Cap ($B)')\n",
    "        axes[0, 0].tick_params(axis='x', rotation=45)\n",
    "        \n",
    "        # 2. P/E Ratio comparison\n",
    "        pe_data = summary_df[summary_df['P/E Ratio'].notna()]\n",
    "        axes[0, 1].bar(pe_data['Ticker'], pe_data['P/E Ratio'], color='orange')\n",
    "        axes[0, 1].set_title('Price-to-Earnings Ratio')\n",
    "        axes[0, 1].set_ylabel('P/E Ratio')\n",
    "        axes[0, 1].tick_params(axis='x', rotation=45)\n",
    "        \n",
    "        # 3. DCF vs Current Price\n",
    "        axes[0, 2].scatter(relative_valuations_df['Current Price'], relative_valuations_df['DCF Price'], s=100)\n",
    "        axes[0, 2].plot([0, max(relative_valuations_df['Current Price'])], \n",
    "                       [0, max(relative_valuations_df['Current Price'])], 'r--', alpha=0.7)\n",
    "        axes[0, 2].set_xlabel('Current Price')\n",
    "        axes[0, 2].set_ylabel('DCF Price')\n",
    "        axes[0, 2].set_title('DCF vs Current Price')\n",
    "        \n",
    "        # Add company labels\n",
    "        for i, row in relative_valuations_df.iterrows():\n",
    "            axes[0, 2].annotate(row['Ticker'], \n",
    "                              (row['Current Price'], row['DCF Price']),\n",
    "                              xytext=(5, 5), textcoords='offset points', fontsize=8)\n",
    "        \n",
    "        # 4. Valuation Multiples Heatmap\n",
    "        multiples_data = summary_df[['Ticker', 'P/E Ratio', 'P/S Ratio', 'EV/EBITDA', 'P/B Ratio']].set_index('Ticker')\n",
    "        im = axes[1, 0].imshow(multiples_data.T, cmap='RdYlBu_r', aspect='auto')\n",
    "        axes[1, 0].set_xticks(range(len(multiples_data.index)))\n",
    "        axes[1, 0].set_xticklabels(multiples_data.index)\n",
    "        axes[1, 0].set_yticks(range(len(multiples_data.columns)))\n",
    "        axes[1, 0].set_yticklabels(multiples_data.columns)\n",
    "        axes[1, 0].set_title('Valuation Multiples Heatmap')\n",
    "        plt.colorbar(im, ax=axes[1, 0])\n",
    "        \n",
    "        # 5. Price Comparison (Current vs Implied)\n",
    "        price_comparison = relative_valuations_df[['Ticker', 'Current Price', 'PE Implied Price', \n",
    "                                                 'PS Implied Price', 'PB Implied Price', 'DCF Price']]\n",
    "        price_comparison_clean = price_comparison.set_index('Ticker').fillna(0)\n",
    "        \n",
    "        x = np.arange(len(price_comparison_clean.index))\n",
    "        width = 0.15\n",
    "        \n",
    "        axes[1, 1].bar(x - 2*width, price_comparison_clean['Current Price'], width, label='Current Price')\n",
    "        axes[1, 1].bar(x - width, price_comparison_clean['PE Implied Price'], width, label='PE Implied')\n",
    "        axes[1, 1].bar(x, price_comparison_clean['PS Implied Price'], width, label='PS Implied')\n",
    "        axes[1, 1].bar(x + width, price_comparison_clean['PB Implied Price'], width, label='PB Implied')\n",
    "        axes[1, 1].bar(x + 2*width, price_comparison_clean['DCF Price'], width, label='DCF Price')\n",
    "        \n",
    "        axes[1, 1].set_xlabel('Companies')\n",
    "        axes[1, 1].set_ylabel('Price ($)')\n",
    "        axes[1, 1].set_title('Price Comparison: Current vs Implied Valuations')\n",
    "        axes[1, 1].set_xticks(x)\n",
    "        axes[1, 1].set_xticklabels(price_comparison_clean.index, rotation=45)\n",
    "        axes[1, 1].legend()\n",
    "        \n",
    "        # 6. Premium/Discount Analysis\n",
    "        premium_discount = []\n",
    "        for _, row in relative_valuations_df.iterrows():\n",
    "            current = row['Current Price']\n",
    "            dcf = row['DCF Price']\n",
    "            pe_implied = row['PE Implied Price']\n",
    "            \n",
    "            dcf_premium = ((current - dcf) / dcf * 100) if not np.isnan(dcf) else 0\n",
    "            pe_premium = ((current - pe_implied) / pe_implied * 100) if not np.isnan(pe_implied) else 0\n",
    "            \n",
    "            premium_discount.append({\n",
    "                'Ticker': row['Ticker'],\n",
    "                'DCF Premium/Discount (%)': dcf_premium,\n",
    "                'PE Premium/Discount (%)': pe_premium\n",
    "            })\n",
    "        \n",
    "        premium_df = pd.DataFrame(premium_discount)\n",
    "        \n",
    "        x = np.arange(len(premium_df))\n",
    "        width = 0.35\n",
    "        \n",
    "        axes[1, 2].bar(x - width/2, premium_df['DCF Premium/Discount (%)'], width, \n",
    "                      label='DCF Premium/Discount', alpha=0.8)\n",
    "        axes[1, 2].bar(x + width/2, premium_df['PE Premium/Discount (%)'], width, \n",
    "                      label='PE Premium/Discount', alpha=0.8)\n",
    "        axes[1, 2].axhline(y=0, color='black', linestyle='-', linewidth=0.5)\n",
    "        axes[1, 2].set_xlabel('Companies')\n",
    "        axes[1, 2].set_ylabel('Premium/Discount (%)')\n",
    "        axes[1, 2].set_title('Valuation Premium/Discount Analysis')\n",
    "        axes[1, 2].set_xticks(x)\n",
    "        axes[1, 2].set_xticklabels(premium_df['Ticker'], rotation=45)\n",
    "        axes[1, 2].legend()\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        \n",
    "        # Save the comprehensive figure\n",
    "        if save_figures:\n",
    "            comprehensive_path = os.path.join(output_dir, \"01_comprehensive_analysis.png\")\n",
    "            plt.savefig(comprehensive_path, dpi=300, bbox_inches='tight', facecolor='white')\n",
    "            print(f\"✓ Saved: {comprehensive_path}\")\n",
    "        \n",
    "        plt.show()\n",
    "        \n",
    "        # Create and save individual charts for better clarity\n",
    "        if save_figures:\n",
    "            self._save_individual_charts(summary_df, relative_valuations_df, output_dir)\n",
    "    \n",
    "    def _save_individual_charts(self, summary_df, relative_valuations_df, output_dir):\n",
    "        \"\"\"Create and save individual charts as separate PNG files\"\"\"\n",
    "        \n",
    "        # 1. Market Cap Chart\n",
    "        plt.figure(figsize=(12, 6))\n",
    "        bars = plt.bar(summary_df['Ticker'], summary_df['Market Cap (B)'], \n",
    "                      color='steelblue', alpha=0.8)\n",
    "        plt.title('MAG7 Market Capitalization Comparison', fontsize=14, fontweight='bold')\n",
    "        plt.ylabel('Market Cap (Billions USD)', fontsize=12)\n",
    "        plt.xlabel('Companies', fontsize=12)\n",
    "        plt.xticks(rotation=45)\n",
    "        \n",
    "        # Add value labels on bars\n",
    "        for bar in bars:\n",
    "            height = bar.get_height()\n",
    "            plt.text(bar.get_x() + bar.get_width()/2., height + height*0.01,\n",
    "                    f'${height:.0f}B', ha='center', va='bottom', fontsize=10)\n",
    "        \n",
    "        plt.grid(axis='y', alpha=0.3)\n",
    "        plt.tight_layout()\n",
    "        market_cap_path = os.path.join(output_dir, \"02_market_cap_comparison.png\")\n",
    "        plt.savefig(market_cap_path, dpi=300, bbox_inches='tight', facecolor='white')\n",
    "        plt.close()\n",
    "        print(f\"✓ Saved: {market_cap_path}\")\n",
    "        \n",
    "        # 2. P/E Ratio Chart\n",
    "        pe_data = summary_df[summary_df['P/E Ratio'].notna()]\n",
    "        if not pe_data.empty:\n",
    "            plt.figure(figsize=(12, 6))\n",
    "            bars = plt.bar(pe_data['Ticker'], pe_data['P/E Ratio'], \n",
    "                          color='orange', alpha=0.8)\n",
    "            plt.title('MAG7 Price-to-Earnings Ratio Comparison', fontsize=14, fontweight='bold')\n",
    "            plt.ylabel('P/E Ratio', fontsize=12)\n",
    "            plt.xlabel('Companies', fontsize=12)\n",
    "            plt.xticks(rotation=45)\n",
    "            \n",
    "            # Add value labels\n",
    "            for bar in bars:\n",
    "                height = bar.get_height()\n",
    "                plt.text(bar.get_x() + bar.get_width()/2., height + height*0.01,\n",
    "                        f'{height:.1f}', ha='center', va='bottom', fontsize=10)\n",
    "            \n",
    "            plt.grid(axis='y', alpha=0.3)\n",
    "            plt.tight_layout()\n",
    "            pe_path = os.path.join(output_dir, \"03_pe_ratio_comparison.png\")\n",
    "            plt.savefig(pe_path, dpi=300, bbox_inches='tight', facecolor='white')\n",
    "            plt.close()\n",
    "            print(f\"✓ Saved: {pe_path}\")\n",
    "        \n",
    "        # 3. DCF vs Current Price Scatter Plot\n",
    "        plt.figure(figsize=(10, 8))\n",
    "        scatter = plt.scatter(relative_valuations_df['Current Price'], \n",
    "                            relative_valuations_df['DCF Price'], \n",
    "                            s=150, alpha=0.7, c='red')\n",
    "        \n",
    "        # Perfect valuation line (where DCF = Current Price)\n",
    "        max_price = max(relative_valuations_df['Current Price'].max(), \n",
    "                       relative_valuations_df['DCF Price'].max())\n",
    "        plt.plot([0, max_price], [0, max_price], 'k--', alpha=0.7, linewidth=2, \n",
    "                label='Perfect Valuation Line')\n",
    "        \n",
    "        plt.xlabel('Current Market Price ($)', fontsize=12)\n",
    "        plt.ylabel('DCF Intrinsic Value ($)', fontsize=12)\n",
    "        plt.title('DCF Valuation vs Current Market Price', fontsize=14, fontweight='bold')\n",
    "        \n",
    "        # Add company labels\n",
    "        for i, row in relative_valuations_df.iterrows():\n",
    "            plt.annotate(row['Ticker'], \n",
    "                        (row['Current Price'], row['DCF Price']),\n",
    "                        xytext=(8, 8), textcoords='offset points', \n",
    "                        fontsize=10, fontweight='bold')\n",
    "        \n",
    "        plt.legend()\n",
    "        plt.grid(alpha=0.3)\n",
    "        plt.tight_layout()\n",
    "        dcf_path = os.path.join(output_dir, \"04_dcf_vs_current_price.png\")\n",
    "        plt.savefig(dcf_path, dpi=300, bbox_inches='tight', facecolor='white')\n",
    "        plt.close()\n",
    "        print(f\"✓ Saved: {dcf_path}\")\n",
    "        \n",
    "        # 4. Valuation Methods Comparison\n",
    "        plt.figure(figsize=(14, 8))\n",
    "        price_comparison = relative_valuations_df[['Ticker', 'Current Price', 'PE Implied Price', \n",
    "                                                 'PS Implied Price', 'PB Implied Price', 'DCF Price']]\n",
    "        price_comparison_clean = price_comparison.set_index('Ticker').fillna(0)\n",
    "        \n",
    "        x = np.arange(len(price_comparison_clean.index))\n",
    "        width = 0.15\n",
    "        \n",
    "        plt.bar(x - 2*width, price_comparison_clean['Current Price'], width, \n",
    "               label='Current Price', alpha=0.8, color='blue')\n",
    "        plt.bar(x - width, price_comparison_clean['PE Implied Price'], width, \n",
    "               label='PE Implied', alpha=0.8, color='orange')\n",
    "        plt.bar(x, price_comparison_clean['PS Implied Price'], width, \n",
    "               label='PS Implied', alpha=0.8, color='green')\n",
    "        plt.bar(x + width, price_comparison_clean['PB Implied Price'], width, \n",
    "               label='PB Implied', alpha=0.8, color='red')\n",
    "        plt.bar(x + 2*width, price_comparison_clean['DCF Price'], width, \n",
    "               label='DCF Price', alpha=0.8, color='purple')\n",
    "        \n",
    "        plt.xlabel('Companies', fontsize=12)\n",
    "        plt.ylabel('Price ($)', fontsize=12)\n",
    "        plt.title('Valuation Methods Comparison: Current vs Implied Prices', fontsize=14, fontweight='bold')\n",
    "        plt.xticks(x, price_comparison_clean.index, rotation=45)\n",
    "        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "        plt.grid(axis='y', alpha=0.3)\n",
    "        plt.tight_layout()\n",
    "        methods_path = os.path.join(output_dir, \"05_valuation_methods_comparison.png\")\n",
    "        plt.savefig(methods_path, dpi=300, bbox_inches='tight', facecolor='white')\n",
    "        plt.close()\n",
    "        print(f\"✓ Saved: {methods_path}\")\n",
    "        \n",
    "        # 5. Premium/Discount Analysis\n",
    "        premium_discount = []\n",
    "        for _, row in relative_valuations_df.iterrows():\n",
    "            current = row['Current Price']\n",
    "            dcf = row['DCF Price']\n",
    "            pe_implied = row['PE Implied Price']\n",
    "            \n",
    "            dcf_premium = ((current - dcf) / dcf * 100) if not np.isnan(dcf) and dcf != 0 else 0\n",
    "            pe_premium = ((current - pe_implied) / pe_implied * 100) if not np.isnan(pe_implied) and pe_implied != 0 else 0\n",
    "            \n",
    "            premium_discount.append({\n",
    "                'Ticker': row['Ticker'],\n",
    "                'DCF Premium/Discount (%)': dcf_premium,\n",
    "                'PE Premium/Discount (%)': pe_premium\n",
    "            })\n",
    "        \n",
    "        premium_df = pd.DataFrame(premium_discount)\n",
    "        \n",
    "        plt.figure(figsize=(12, 6))\n",
    "        x = np.arange(len(premium_df))\n",
    "        width = 0.35\n",
    "        \n",
    "        bars1 = plt.bar(x - width/2, premium_df['DCF Premium/Discount (%)'], width, \n",
    "                       label='DCF Premium/Discount (%)', alpha=0.8, color='darkblue')\n",
    "        bars2 = plt.bar(x + width/2, premium_df['PE Premium/Discount (%)'], width, \n",
    "                       label='PE Premium/Discount (%)', alpha=0.8, color='darkred')\n",
    "        \n",
    "        plt.axhline(y=0, color='black', linestyle='-', linewidth=1)\n",
    "        plt.xlabel('Companies', fontsize=12)\n",
    "        plt.ylabel('Premium/Discount (%)', fontsize=12)\n",
    "        plt.title('Valuation Premium/Discount Analysis', fontsize=14, fontweight='bold')\n",
    "        plt.xticks(x, premium_df['Ticker'], rotation=45)\n",
    "        plt.legend()\n",
    "        plt.grid(axis='y', alpha=0.3)\n",
    "        \n",
    "        # Add value labels on bars\n",
    "        for bars in [bars1, bars2]:\n",
    "            for bar in bars:\n",
    "                height = bar.get_height()\n",
    "                plt.text(bar.get_x() + bar.get_width()/2., height + (1 if height >= 0 else -3),\n",
    "                        f'{height:.1f}%', ha='center', va='bottom' if height >= 0 else 'top', \n",
    "                        fontsize=9)\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        premium_path = os.path.join(output_dir, \"06_premium_discount_analysis.png\")\n",
    "        plt.savefig(premium_path, dpi=300, bbox_inches='tight', facecolor='white')\n",
    "        plt.close()\n",
    "        print(f\"✓ Saved: {premium_path}\")\n",
    "        \n",
    "        # 6. Financial Metrics Heatmap\n",
    "        plt.figure(figsize=(12, 8))\n",
    "        multiples_data = summary_df[['Ticker', 'P/E Ratio', 'P/S Ratio', 'EV/EBITDA', 'P/B Ratio']].set_index('Ticker')\n",
    "        \n",
    "        # Create heatmap\n",
    "        sns.heatmap(multiples_data.T, annot=True, cmap='RdYlBu_r', \n",
    "                   fmt='.1f', cbar_kws={'label': 'Ratio Value'})\n",
    "        plt.title('MAG7 Valuation Multiples Heatmap', fontsize=14, fontweight='bold')\n",
    "        plt.ylabel('Valuation Metrics', fontsize=12)\n",
    "        plt.xlabel('Companies', fontsize=12)\n",
    "        plt.tight_layout()\n",
    "        heatmap_path = os.path.join(output_dir, \"07_valuation_multiples_heatmap.png\")\n",
    "        plt.savefig(heatmap_path, dpi=300, bbox_inches='tight', facecolor='white')\n",
    "        plt.close()\n",
    "        print(f\"✓ Saved: {heatmap_path}\")\n",
    "        \n",
    "        print(f\"\\n📁 All charts saved successfully in '{output_dir}/' directory!\")\n",
    "        print(\"📊 Individual charts created for:\")\n",
    "        print(\"   • Market Cap Comparison\")\n",
    "        print(\"   • P/E Ratio Analysis\") \n",
    "        print(\"   • DCF vs Current Price\")\n",
    "        print(\"   • Valuation Methods Comparison\")\n",
    "        print(\"   • Premium/Discount Analysis\")\n",
    "        print(\"   • Valuation Multiples Heatmap\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fa12f1d6-147d-4c15-9aee-822930e6468b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================================================================\n",
      "MAG7 COMPREHENSIVE VALUATION ANALYSIS (REAL-TIME DATA)\n",
      "================================================================================\n",
      "Fetching real-time financial data from Yahoo Finance...\n",
      "Fetching data for AAPL...\n",
      "✓ AAPL data fetched successfully\n",
      "Fetching data for MSFT...\n",
      "✓ MSFT data fetched successfully\n",
      "Fetching data for GOOGL...\n",
      "✓ GOOGL data fetched successfully\n",
      "Fetching data for AMZN...\n",
      "✓ AMZN data fetched successfully\n",
      "Fetching data for NVDA...\n",
      "✓ NVDA data fetched successfully\n",
      "Fetching data for TSLA...\n",
      "✓ TSLA data fetched successfully\n",
      "Fetching data for META...\n",
      "✓ META data fetched successfully\n",
      "Data fetching completed!\n",
      "\n",
      "FETCHED FINANCIAL DATA SUMMARY\n",
      "----------------------------------------\n",
      "AAPL: Market Cap: $2993.4B, Price: $200.42\n",
      "MSFT: Market Cap: $3399.3B, Price: $457.36\n",
      "GOOGL: Market Cap: $2097.4B, Price: $172.36\n",
      "AMZN: Market Cap: $2173.4B, Price: $204.72\n",
      "NVDA: Market Cap: $3287.7B, Price: $134.81\n",
      "TSLA: Market Cap: $1149.6B, Price: $356.90\n",
      "META: Market Cap: $1618.2B, Price: $643.58\n",
      "\n",
      "1. SUMMARY VALUATION METRICS\n",
      "--------------------------------------------------\n",
      "            Company Ticker  Current Price  Market Cap (B)  P/E Ratio  DCF Price  P/S Ratio  EV/EBITDA  P/B Ratio\n",
      "         Apple Inc.   AAPL         200.42         2993.43      31.93     127.15       7.66      22.11      52.56\n",
      "    Microsoft Corp.   MSFT         457.36         3399.35      38.57     174.39      13.87      23.12      12.66\n",
      "      Alphabet Inc.  GOOGL         172.36         2097.43      10.02     226.68       2.87      15.47       3.09\n",
      "    Amazon.com Inc.   AMZN         204.72         2173.39      36.68      51.32       3.41      17.64       7.60\n",
      "       NVIDIA Corp.   NVDA         134.81         3287.69      45.11      45.24      25.19      39.48      41.44\n",
      "         Tesla Inc.   TSLA         356.90         1149.56     161.23      20.97      11.77      91.40      15.77\n",
      "Meta Platforms Inc.   META         643.58         1618.17      22.41     449.84       8.49      18.45       7.65\n",
      "\n",
      "\n",
      "2. SECTOR AVERAGE MULTIPLES\n",
      "------------------------------\n",
      "P/E Ratio: 30.79\n",
      "P/S Ratio: 10.46\n",
      "EV/EBITDA: 22.71\n",
      "P/B Ratio: 20.11\n",
      "\n",
      "\n",
      "3. RELATIVE VALUATION ANALYSIS\n",
      "----------------------------------------\n",
      "Ticker             Company  Current Price  PE Implied Price  PS Implied Price  PB Implied Price  DCF Price\n",
      "  AAPL          Apple Inc.         200.42            193.22            273.97             76.68     127.15\n",
      "  MSFT     Microsoft Corp.         457.36            365.08            345.11            726.42     174.39\n",
      " GOOGL       Alphabet Inc.         172.36            529.62            629.34           1123.28     226.68\n",
      "  AMZN     Amazon.com Inc.         204.72            171.82            628.83            541.70      51.32\n",
      "  NVDA        NVIDIA Corp.         134.81             92.01             55.99             65.41      45.24\n",
      "  TSLA          Tesla Inc.         356.90             68.15            317.38            455.24      20.97\n",
      "  META Meta Platforms Inc.         643.58            884.28            792.86           1691.67     449.84\n",
      "\n",
      "\n",
      "4. KEY INSIGHTS\n",
      "--------------------\n",
      "• Highest P/E: Tesla Inc. (161.2)\n",
      "• Lowest P/E: Alphabet Inc. (10.0)\n",
      "\n",
      "• DCF Analysis:\n",
      "  - Potentially Undervalued: GOOGL\n",
      "  - Potentially Overvalued: AAPL, MSFT, AMZN, NVDA, TSLA, META\n",
      "\n",
      "• Market Cap Leader: Microsoft Corp. ($3399.346552832B)\n",
      "\n",
      "• Data Source: Yahoo Finance (Real-time)\n",
      "• Analysis Date: 2025-05-28 16:34:14\n",
      "\n",
      "\n",
      "5. GENERATING VISUALIZATIONS...\n",
      "-----------------------------------\n",
      "Saving charts to directory: mag7_analysis_charts/\n",
      "✓ Saved: mag7_analysis_charts/01_comprehensive_analysis.png\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1200 with 7 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "✓ Saved: mag7_analysis_charts/02_market_cap_comparison.png\n",
      "✓ Saved: mag7_analysis_charts/03_pe_ratio_comparison.png\n",
      "✓ Saved: mag7_analysis_charts/04_dcf_vs_current_price.png\n",
      "✓ Saved: mag7_analysis_charts/05_valuation_methods_comparison.png\n",
      "✓ Saved: mag7_analysis_charts/06_premium_discount_analysis.png\n",
      "✓ Saved: mag7_analysis_charts/07_valuation_multiples_heatmap.png\n",
      "\n",
      "📁 All charts saved successfully in 'mag7_analysis_charts/' directory!\n",
      "📊 Individual charts created for:\n",
      "   • Market Cap Comparison\n",
      "   • P/E Ratio Analysis\n",
      "   • DCF vs Current Price\n",
      "   • Valuation Methods Comparison\n",
      "   • Premium/Discount Analysis\n",
      "   • Valuation Multiples Heatmap\n"
     ]
    }
   ],
   "source": [
    "def run_mag7_analysis():\n",
    "    \"\"\"Run the complete MAG7 valuation analysis with real-time data\"\"\"\n",
    "    \n",
    "    print(\"=\"*80)\n",
    "    print(\"MAG7 COMPREHENSIVE VALUATION ANALYSIS (REAL-TIME DATA)\")\n",
    "    print(\"=\"*80)\n",
    "    \n",
    "    # Initialize the model (this will fetch real-time data)\n",
    "    model = MAG7ValuationModel()\n",
    "    \n",
    "    # Display fetched data summary\n",
    "    print(\"FETCHED FINANCIAL DATA SUMMARY\")\n",
    "    print(\"-\" * 40)\n",
    "    for ticker in model.companies:\n",
    "        data = model.financial_data[ticker]\n",
    "        print(f\"{ticker}: Market Cap: ${data['market_cap']:.1f}B, Price: ${data['current_price']:.2f}\")\n",
    "    \n",
    "    # Perform comprehensive analysis\n",
    "    summary_df, pe_data, dcf_data, ps_data, ev_ebitda_data, pb_data = model.comprehensive_analysis()\n",
    "    \n",
    "    # Calculate relative valuations\n",
    "    relative_valuations_df, sector_averages = model.calculate_relative_valuations(summary_df)\n",
    "    \n",
    "    # Display results\n",
    "    print(\"\\n1. SUMMARY VALUATION METRICS\")\n",
    "    print(\"-\" * 50)\n",
    "    print(summary_df.round(2).to_string(index=False))\n",
    "    \n",
    "    print(f\"\\n\\n2. SECTOR AVERAGE MULTIPLES\")\n",
    "    print(\"-\" * 30)\n",
    "    for metric, avg in sector_averages.items():\n",
    "        print(f\"{metric}: {avg:.2f}\")\n",
    "    \n",
    "    print(f\"\\n\\n3. RELATIVE VALUATION ANALYSIS\")\n",
    "    print(\"-\" * 40)\n",
    "    print(relative_valuations_df.round(2).to_string(index=False))\n",
    "    \n",
    "    # Key insights\n",
    "    print(f\"\\n\\n4. KEY INSIGHTS\")\n",
    "    print(\"-\" * 20)\n",
    "    \n",
    "    # Find most expensive and cheapest by P/E\n",
    "    pe_valid = summary_df[summary_df['P/E Ratio'].notna()]\n",
    "    if not pe_valid.empty:\n",
    "        highest_pe = pe_valid.loc[pe_valid['P/E Ratio'].idxmax()]\n",
    "        lowest_pe = pe_valid.loc[pe_valid['P/E Ratio'].idxmin()]\n",
    "        print(f\"• Highest P/E: {highest_pe['Company']} ({highest_pe['P/E Ratio']:.1f})\")\n",
    "        print(f\"• Lowest P/E: {lowest_pe['Company']} ({lowest_pe['P/E Ratio']:.1f})\")\n",
    "    \n",
    "    # DCF Analysis\n",
    "    dcf_undervalued = relative_valuations_df[relative_valuations_df['DCF Price'] > relative_valuations_df['Current Price']]\n",
    "    dcf_overvalued = relative_valuations_df[relative_valuations_df['DCF Price'] < relative_valuations_df['Current Price']]\n",
    "    \n",
    "    print(f\"\\n• DCF Analysis:\")\n",
    "    if not dcf_undervalued.empty:\n",
    "        print(f\"  - Potentially Undervalued: {', '.join(dcf_undervalued['Ticker'].tolist())}\")\n",
    "    if not dcf_overvalued.empty:\n",
    "        print(f\"  - Potentially Overvalued: {', '.join(dcf_overvalued['Ticker'].tolist())}\")\n",
    "    \n",
    "    # Market cap leaders\n",
    "    largest_company = summary_df.loc[summary_df['Market Cap (B)'].idxmax()]\n",
    "    print(f\"\\n• Market Cap Leader: {largest_company['Company']} (${largest_company['Market Cap (B)']}B)\")\n",
    "    \n",
    "    # Data freshness note\n",
    "    print(f\"\\n• Data Source: Yahoo Finance (Real-time)\")\n",
    "    print(f\"• Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n",
    "    \n",
    "    # Create visualizations\n",
    "    print(f\"\\n\\n5. GENERATING VISUALIZATIONS...\")\n",
    "    print(\"-\" * 35)\n",
    "    model.visualize_analysis(summary_df, relative_valuations_df, save_figures=True)\n",
    "    \n",
    "    return model, summary_df, relative_valuations_df\n",
    "\n",
    "# Run the analysis\n",
    "if __name__ == \"__main__\":\n",
    "    model, summary_df, relative_valuations_df = run_mag7_analysis()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
